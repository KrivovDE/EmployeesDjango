from django.db import models


class Person(models.Model):
    """
    Person создаст таблицу базы данных следующим образом:

    CREATE TABLE 'person' (
    "id" bigint NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    "first_name" varchar(30) NOT NULL,
    "last_name" varchar(30) NOT NULL,
    "surname" varchar(30) NOT NULL
    );

    Поле id добавляется автоматически и по сути своей является суррогатным ключем,
    но это поведение можно переопределить.
    """
    first_name = models.CharField(max_length=30)
    last_name = models.CharField(max_length=30)
    surname = models.CharField(max_length=30)

    def __str__(self):
        return f'{self.surname} - {self.first_name}'

    class Meta:
        db_table = 'person'
        verbose_name = 'Работник'
        verbose_name_plural = 'Работники'
        # unique_together - посредством  уникальных индексов БД
        # реализует функционал уникальности ФИО
        unique_together = [
            ('first_name', 'last_name', 'surname')
        ]


class Function(models.Model):
    """
    Function cоздаст таблицу 'function'
    """
    function = models.CharField(max_length=30)

    def __str__(self):
        return f'{self.function}'

    class Meta:
        db_table = 'function'
        verbose_name = 'Должность'
        verbose_name_plural = 'Должности'


class Employees(models.Model):
    """
    Employees cоздаст таблицу 'employees', через отношение с таблицами 'person' и 'function'.
    Переопределено стандартное поведение моделей django, добавлено поле id - primary_key (суррогатный ключ)
    """
    id = models.BigAutoField(primary_key=True)
    person = models.OneToOneField(Person, on_delete=models.CASCADE, null=False, blank=False)
    # Отношение OneToOneField рекомендовано к использованию для уникальных полей,
    # вместо сочетания ForeignKey - unique=True
    function = models.ForeignKey(Function, on_delete=models.SET_NULL, blank=False, null=True)

    def __str__(self):
        return f'{self.person} - {self.function}'

    class Meta:
        db_table = 'employees'
        verbose_name = 'Сотрудник'
        verbose_name_plural = 'Сотрудники'





